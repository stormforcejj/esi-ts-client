/* tslint:disable */
/* eslint-disable */
/* This file is auto-generated by OpenAPI Generator. DO NOT EDIT manually. */

import { Configuration, Middleware } from "./";
import { headersConfigMiddleware } from "../middleware/userAgent";
import { ratelimitingMiddleware } from "../middleware/ratelimiting";
import { cachingMiddleware } from "../middleware/caching";
import { initCache } from "../lib/caching";

import { EsiClientConfig, EsiCacheStrategy } from "../types/config";

import dotenv from 'dotenv';
import Keyv from "keyv";

{{#apiInfo.apis}}
import { {{classname}} } from "./apis/{{classFilename}}";
{{/apiInfo.apis}}
import { SSO } from "./apis/SSO"

export * from "./models";
export * from "./apis";

export class EsiClient {
{{#apiInfo.apis}}
  public readonly {{#lambda.camelcase}}{{classname}}{{/lambda.camelcase}} : {{classname}};
{{/apiInfo.apis}}

  public readonly sso : SSO;

  private cacheStrategy : EsiCacheStrategy;
  private cache: Keyv<any> | undefined;

  constructor(config?: EsiClientConfig) {
    const packageJson = require("../../package.json");
    
    dotenv.config({quiet: true})

    const userAgent = config?.userAgentOverride ? config.userAgentOverride : process.env.ESI_USER_AGENT;;

    if(!userAgent || userAgent === "") {
        throw Error("User agent must be specified in the env file")
    }

    const fullUserAgent =
            userAgent +
            ` using stormforcejj/esi-ts-client/${
                packageJson.version || "X.X.X"
            } (+https://github.com/stormforcejj/esi-ts-client discord:stormforcejj esi-client@stormforcejj.co.uk)`;

    let middleware : Middleware[] = [headersConfigMiddleware(fullUserAgent), ratelimitingMiddleware(config?.retries ?? 3)].concat(config?.middleware || []);

    this.cacheStrategy = !process.env.ESI_CACHE_STRATEGY ? EsiCacheStrategy.MEMORY : process.env.ESI_CACHE_STRATEGY as EsiCacheStrategy  

    if (this.cacheStrategy !== EsiCacheStrategy.NONE && !config?.bypassCache) {
        this.cache = initCache();
        middleware.push(cachingMiddleware(this.cache));
    }

    const configuration = new Configuration({
      middleware: middleware,
    });

    const ssoConfiguration = new Configuration({
        middleware: [headersConfigMiddleware(fullUserAgent)],
        basePath: "https://login.eveonline.com",
    });

{{#apiInfo.apis}}
    this.{{#lambda.camelcase}}{{classname}}{{/lambda.camelcase}} = new {{classname}}(configuration);
{{/apiInfo.apis}}

    this.sso = new SSO(ssoConfiguration);
  }
}